/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.io.IOException;
import java.nio.file.Path;

class AppTest {
    @Test public void testAnalyzeWeatherData() {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        String expectedOutput = "High: 72\n" +
                "Low: 51\n" +
                "Never saw temperature: 63\n" +
                "Never saw temperature: 67\n" +
                "Never saw temperature: 68\n" +
                "Never saw temperature: 69\n";

        String result = App.analyzeWeatherData(weeklyMonthTemperatures);

        assertEquals(expectedOutput, result);
    }

    @Test
    public void testTally() {
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String expectedWinner = "Bush";
        String actualWinner = App.tally(votes);

        assertEquals(expectedWinner, actualWinner);
    }
    @Test
    public void testCheckForMissingSemicolons_NoErrors() throws IOException {
        Path filePath = Paths.get("src/test/resources/testNoErrors.js");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));

        App.checkForMissingSemicolons(filePath);

        String expectedOutput = "";
        assertEquals(expectedOutput, outputStream.toString());
    }

    @Test
    public void testCheckForMissingSemicolons_OneError() throws IOException {
        Path filePath = Paths.get("src/test/resources/testOneError.js");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));

        App.checkForMissingSemicolons(filePath);

        String expectedOutput = "Line 2: Missing semicolon.\r\n";
        assertEquals(expectedOutput, outputStream.toString());
    }

    @Test
    public void testCheckForMissingSemicolons_FewErrors() throws IOException {
        Path filePath = Paths.get("src/test/resources/testFewErrors.js");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));

        App.checkForMissingSemicolons(filePath);

        String expectedOutput = "Line 2: Missing semicolon.\r\nLine 9: Missing semicolon.\r\nLine 11: Missing semicolon.\r\n";
        assertEquals(expectedOutput, outputStream.toString());
    }

    @Test
    public void testCheckForMissingSemicolons_ManyErrors() throws IOException {
        Path filePath = Paths.get("src/test/resources/testManyErrors.js");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));

        App.checkForMissingSemicolons(filePath);

        String expectedOutput = "Line 2: Missing semicolon.\r\nLine 5: Missing semicolon.\r\nLine 6: Missing semicolon.\r\nLine 9: Missing semicolon.\r\nLine 11: Missing semicolon.\r\n" ;
        assertEquals(expectedOutput, outputStream.toString());
    }

    @Test
    public void testCheckForMissingSemicolons_EmptyFile() throws IOException {
        Path filePath = Paths.get("src/test/resources/testEmptyFile.js");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));

        App.checkForMissingSemicolons(filePath);

        String expectedOutput = "";
        assertEquals(expectedOutput, outputStream.toString());
    }



    }

